# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest autopep8 radon
        sudo apt-get install jq
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Radon calculates metrics like cyclomatic complexity, maintainability index from your source code
      run: |
        output=$(radon cc hw2_debugging.py rand.py -j --json)
        echo "radon output"
        echo $output

        res=$output['hw2_debugging.py'][0]['name']

        # Use jq to extract the name of the first function
        name=$(echo "$output" | jq -r '.["hw2_debugging.py"][0].name')
        complexity=$(echo "$output" | jq -r '.["hw2_debugging.py"][0].complexity')
        # Concatenate values
        res="Function: ${name} - Complexity: ${complexity}"
        echo "res: $res"
        echo "script-output=$res" >> $GITHUB_ENV

    - name: Print captured output
      run: |
        echo "Captured output: ${{ env.script-output }}"

    - name: Radon badge output
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 22e5aebe393b1972403ff8ac34ba415d
        filename: test.json # Use test.svg if you want to use the SVG mode. $(radon cc hw2_debugging.py -j --json)
        label: radon | cyclomatic complexity
        message: ${{ env.script-output }}
        color: orange

    - name: autopep8 for automatically formats python code to conform pep 8 style guide.
      run: |
        autopep8 -d --diff hw2_debugging.py
        autopep8 -d --diff rand.py
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
